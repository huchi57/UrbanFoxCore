using System.CodeDom.Compiler;
using System.IO;
using System.Text;
using UnityEditor;
using UnityEditorInternal;

namespace UrbanFox.Editor
{
    public class GenerateTagsAndLayers
    {
        private const bool m_dryTest = false;

        private const string m_scriptCreationFolder = "Assets/Plugins/UrbanFox/AutoGeneratedScripts/";
        private static readonly CodeDomProvider m_provider = CodeDomProvider.CreateProvider("C#");

        [MenuItem("OwO/Tools/Generate Tags.cs")]
        private static void GenerateTags()
        {
            var tags = InternalEditorUtility.tags;
            if (tags.IsNullOrEmpty())
            {
                return;
            }

            var content = new StringBuilder();
            content.AppendLine("// <auto-generated> Generated from GenerateTagsAndLayers.cs");
            content.AppendLine("public class Tags");
            content.AppendLine("{");
            foreach (var tag in tags)
            {
                var variableIdentifier = tag.Capitalize().Replace(" ", string.Empty);
                if (!m_provider.IsValidIdentifier(variableIdentifier))
                {
                    FoxyLogger.LogError($"Cannot generate Tags.cs because an invalid identifier name has be found: {tag}.");
                    return;
                }
                content.AppendLine($"    public static string {variableIdentifier} = \"{tag}\";");
            }
            content.AppendLine("}");

            if (!Directory.Exists(m_scriptCreationFolder))
            {
                Directory.CreateDirectory(m_scriptCreationFolder);
            }
            var fileLocation = Path.Combine(m_scriptCreationFolder, $"Tags{(m_dryTest ? ".txt" : ".cs")}");
            File.WriteAllText(fileLocation, content.ToString());
            FoxyLogger.Log($"File {fileLocation} has been auto-generated.");
            AssetDatabase.Refresh();
        }

        // TODO: Currently disabled because Layers behave differently than Tags
        //[MenuItem("OwO/Tools/Generate Layers.cs")]
        //private static void GenerateLayers()
        //{
        //    var layers = InternalEditorUtility.layers;
        //    if (layers.IsNullOrEmpty())
        //    {
        //        return;
        //    }

        //    var content = new StringBuilder();
        //    content.AppendLine("// <auto-generated> Generated from GenerateTagsAndLayers.cs");
        //    content.AppendLine("public class Layers");
        //    content.AppendLine("{");
        //    foreach (var layer in layers)
        //    {
        //        var variableIdentifier = layer.Capitalize().Replace(" ", string.Empty);
        //        if (!m_provider.IsValidIdentifier(variableIdentifier))
        //        {
        //            FoxyLogger.LogError($"Cannot generate Layers.cs because an invalid identifier name has be found: {layer}.");
        //            return;
        //        }
        //        content.AppendLine($"    public static string {variableIdentifier} = \"{layer}\";");
        //    }
        //    content.AppendLine("}");

        //    if (m_dryTest)
        //    {
        //        FoxyLogger.Log(content.ToString());
        //    }

        //    if (!Directory.Exists(m_scriptCreationFolder))
        //    {
        //        Directory.CreateDirectory(m_scriptCreationFolder);
        //    }
        //    var fileLocation = Path.Combine(m_scriptCreationFolder, $"Layers{(m_dryTest ? ".txt" : ".cs")}");
        //    File.WriteAllText(fileLocation, content.ToString());
        //    AssetDatabase.Refresh();
        //}
    }
}
